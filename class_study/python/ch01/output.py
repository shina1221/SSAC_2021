#python3.9버전 사용 python3로 이용

#39P
print('# 하나만 출력합니다.')
print("Hello Python Programming...!")
print()

#-여러개 출력
#ctrl+space는 기능 설명 확인가능
#실행시 ctrl+F5
print("# 여러개를 출력합니다.")
print(10, 20, 30, 40, 50)
print("안녕하세요", "저의","이름은","xx입니다!\n", "***")

#아무것도 입력하지 않으면 단순하게 줄바꿈
print("# 아무것도 출력하지 않음")
print('---확인용---')
print()
print()
print('end')

#스네이크 케이스
"""
hello_coding
hello_python
We_are_the_world
"""
#캐멀 케이스
"""
CreateOutput
CreateRequest
InitServer
Initmatrix
"""

'안녕하세요'[2:4] #하세

#이스케이프 문자
#백슬래시는 항상 따옴표 왼쪽에 위치
print('i say \'mu you say yaho\'!')

print('안녕\n하\t세요.\t반갑습니다')
print()

#백슬레시를 쓰면 이어쓸 수 있음
test = 1+20 *\
    3
#백슬래시를 넣으면 한줄띄기를 안넣음=줄바꿈 없이 문자열 만들기
애국가="""\
동해물과
백두산이~
화려강산\
"""
print(애국가)

#인덱싱
greeting ="안녕하세요"
greeting[3]

#슬라이싱을 하게될때 하나만 지목하면 그 값의 타입만 나오지만 2개이상의 위치를 기준으로 출력하면 리스트로 출력됨
li=[1,"happy",23]
li[0]  #1
li[0:1] #[1]

#대입연산자
"""/
이항 연산자
왼쪽에는 반드시 변수
오른쪽에는 반드시 값(표현식)
모든 연산자를 통틀어서 우선순위가 제일 낮음
대입 연산자가 여러개일 때 연산 순서는 오른쪽에서 왼쪽으로
#a=b=c=200면 200은 c에 바인딩하고, c는 b에 바인딩
/"""

#바인딩
#대입연산자로 변수에 값(객체)를 대입하는 것을 파이썬에서는 
#변수를 객체에 바인딩한다고 표현 

#파이썬 에서는 모든 변수가 참조변수임 변수에 저장되는 값은 메모리 주소임

#IndexError는 리스트나 문자열의 수를 넘는 요소나 글자를 선택할 때 발생

#매개변수(parameters) vs 인자(Arguments)
#함수의 입장:매개변수
#함수를 호출하는 입장:인자
#매개변수는 함수의 로컬 변수로 동작
#인자는 호출하는 쪽에서 넘겨주는값(리터럴, 변수, 함수의 리턴값, 객체, 함수이름)

#중첩함수
#함수의 인자로 함수가 오는 경우

#중첩 
#제일 안쪽의 구조를 먼저처리

#부(뜨다)동소수점 floating-point number
#우선순위가 동일한 연산자 끼리는 왼쪽을 우선 계산한다.
#곱셈보다 더하기를 우선 계산하고 싶다면 플러스 뫌호

#개략적인 연산자 우선순위
"""/
사칙연산자
비교연산자
논리연산자
대입연산자
/"""

#서로 다른 자료를 연산하면 TypeError발생

# 실수형의 지수표현 또는 과학적 표기(scientific notation)
"""/
  - e, E로 10의 몇 승 표시
  ex) 2.73e2 → 2.73 * 10의 2승 = 273.0
       2.73e-2 → 0.0273
/"""

#변수 : 메모리(주소)에 이름 붙인것
#참조변수 : 데이터가(객체)저장된 메모리의 주소가 저장
#파이썬의 변수는 모두 참조변수이며 "객체를 바인딩"한다고 표현

#변수의 필수 단계
#1. 선언 : 변수를 준비하는 단계,(메모리를 할당할 수도 안할 수도) 
#2. 초기화 : 변수에 값(객체)를 최초로 저장 또는 바인딩하는 단계
#3. 참조 : 변수에 접근하는 단계
#          - 변수에 저장/바인딩된 값(객체)사용
#          - 변수에 새로운값 (객체)를 저장/바인딩
#          !)값 읽기(가져오기)
#          2)피연산자로 사용
#          3)함수 또는 클래스의 인자로 사용
#  
# *대부분의 프로그래밍 언어에서는 참조하기 전에 반드시 변수 초기화 필요
# 파이썬도 초기화 없이 참조하면 에러

# 파이썬은 선언과 초기화를 동시에 실시
# 대입연산자를 이용해 초기화    


# 강타입(Strong type) 언어 vs. 약타입(Weak type) 언어
#  - 강타입: 연산 등에서 타입이 중요
#  - 파이썬은 강타입 언어

# 동적(Dynamic) vs. 정적(Static)
#  ⇒ Run-time vs. Compilation-time (Non Run-time)

#네임스페이스 : 각종 식별자를 모아둔 것
#-파이썬의 dir()함수를 사용하면 현재 인터렉티브 셸 또는 특정 네임스페이스를 리스트로 반환

