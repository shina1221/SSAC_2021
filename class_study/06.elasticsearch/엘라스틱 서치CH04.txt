
#엘라스틱 서치에 존재하는 스냅숏 목록 확인
GET /_snapshot/javacafe/_all?pretty

#movie_search 스냅숏 복구 
POST /_snapshot/javacafe/movie-search/_restore

#문서 인덱스 생성이 되었는지 확인
GET /_cat/indices/movie_search?v&pretty

#검색질의 표현방식
#검색질의 표현방식에는 URI 검색과 Request Body 검색이 존재

#URI 검색
#HTTP GET 요청을 활용하는 방식으로 파라미터를 'Key=Value'형태로 전달.
#파라미터를 이용한 간단한 URI 검색 쿼리의 예
GET /movie_search/_search?=prdtYear:2018

#Request Body 검색
#HTTP 요청시 body에 검색할 칼럼과 검색어를 JSON 형태로 표현해서 전달하는 방식
POST /movie_search/_search
{
    "query": {
       "term": {"prdtYear": "2018"}
    }
}

#URI 검색 
#request body 검색에 의해 단순하고 사용하기 편리하지만 복잡한 질의문을 입력하기 힘들다는 단점 존재. 또한 엘라스틱에서 제공하는 모든 검색 옵션을 사용할 수 없음. 하지만 빠른 테스트 가능

POST /movie_search/_search?q=movieNmEn:Family

POST /movie_search/_search?q=movieNmEn * AND prdYear:2017&analyze_wildcard=true&from=0&size=$sort=__score:desc,movieCd:asc&_source_inCludes=movieCd,MovieNm,movieNmEn,typeNm

#Requeset Body 검색

POST /movie_search/_search
{
  "query": {
    "query_string": {
        "default_field": "movieNmEn",
        "query": "Family"
    }
  }
}    


POST movie_search/_search
{
  "query": {
   "query_string": {
     "default_field": "movieNmEn",
       "query": "movieNmEn:* OR prdtYear:2017"
   }
  },
  "from": 0,
  "size": 5,
  "sort": [
    {
      "_score": {
        "order": "desc"
      },
      "movieCd": {
        "order": "asc"
      }
    }    
  ],
  "_source": [
    "movieCd",
    "movieNm",
    "movieNmEn",
    "typeNm"
  ]
}

#Query DSL 
#multi index 검색  
#여러개의 질의를 조합하거나 질의 결과에 대해 다시 검색을 수행하는 등 기존의 URI 검색보다 강력한 검색이 가능해짐
#검색요청 시 ","를 이용해 다수의 인덱스명 입력
#movie_search인덱스와 movie_auto 인덱스sms repGenereNm 필드를 공통적으로 가지고는 있지만 서로 다른 스키마 구조를 가지고 있다. 하지만 Multi Index 쿼리를 이용하면 다수의 비정형 데이터를 가지고 있는 경우에도 한번에 검색가능
#movie_search인덱스와 movie_auto 인덱스를 모두 검색
POST /movie_search/_search
{
  "query": {
    "term": {
      "repGenreNm": "다큐멘터리"
      }
   }
}

#2019년에 생성된 모든 인덱스의 데이터를 검색  
POST /log-2019-*/_search
#쿼리결과 페이징
#페이징 구현
#첫번째 페이지 요청
POST /movie_search/_search
{
  "from": 0,
  "size": 5,
  "query": {
    "term": {
      "repGenreNm": "한국"
      }
   }
}

#두번째 페이지 요청
POST /movie_search/_search
{
  "from": 5,
  "size": 5,
  "query": {
    "term": {
      "repNationNm": "한국"
    }
  }
}

#쿼리결과 정렬
POST /movie_search/_search
{
  "query": {
    "term": {
      "repNationNm": "한국"
    }
  },
  "sort": {
    "prdtYear": {
      "order": "asc"
    }
  }
}


#
POST /movie_search/_search
{
  "query": {
    "term": {
      "repNationNm": "한국"
    }
  },
  "sort": {
    "prdtYear": {
      "order": "asc"
    },
    "_score": {
      "order": "desc"
    }
  }
}

#source 필드 필터링
#이상
POST /movie_search/_search
{
  "hits": {
    "total": 1,
    "max_source": 0.6099695,
    "hits": [{
      "_index": "movie_search",
      "_type": "_doc",
      "_id": "2",
      "_score": 0.6099695,
      "_source": {
        "movieCd": "20174244",
        "movieNm": "버블 패밀리",
        "movieNmEn": "Family  in the Bubble",
      }
    }]
  }
}


#
POST /movie_search/_search
{
  "_source": [
    "movieNm"
  ],
  "query": {
    "term": {
      "repNationNm": "한국"
    }
 }
}


#범위검색
#lt < 피연산자보다 작음
#gt > 피연산자보다 큼
#lte <= 피연산자보다 작거나 같음
#gte >= 피연산자보다 크거나 같음
#2016년부터 2017년 데이터 조회
POST /movie_search/_search
{
  "query": {
    "range": {
      "prdtYear": {
        "gte": "2016",
        "lte": "2017"
      }
    }
  }
}

#operator 설정 
#엘라스틱 서치는 검색시 문장이 들어올 경우 기본적으로 or 연산
#operator 파라미터로 or나 and 연산자를 명시적으로 지정할 수 있음
#operator 파라미터를 생략하면 or 연산으로 동작해서 자전차왕이나 엄복동이라는 단어가 있는 모든 문서 검색
POST /movie_search/_search
{
  "query": {
    "match": {
      "movieNm": {
        "query": "자전차왕 엄복동",
        "operator": "and"
      }
    }
  }
}

#minimum_should_match 설정
#or 연산을 수행할 경우 검색결과가 너무 많아질 수 있음. 이 경우 텀의 개수가 몇개이상 매칭될 때만 검색 결과로 나올 수 있게함. 즉 and 연산자가 아닌 or 연산자로도 and 연산자와 비슷한 효과를 낼 수 있음.
POST /movie_search/_search
{
  "query": {
    "match": {
      "movieNm": {
        "query": "자전차왕 엄복동",
        "minimum_should_match": 2
      }
    }
  }
}


#fizzness 설정
#레벤슈타인 편집거리 알고리즘을 기반으로 문서의 필드값을 여러번 변경하는 방식으로 동작
#유사한 검색결과를 찾기우해 허용범위의 텀으로 변경해가며 문서를 찾음
#오차범위 값은 0,2,4,AUTO 가 있음.(글자수 기준)
#한글에는 적합하지 않고 영어에 적합
POST /movie_search/_search
{
  "query": {
    "match": {
      "movieNmEn": {
        "query": "Fli high",
        "fuzziness": 1
      }
    }
  }
}


#boost 설정
#관련성이 높은 필드나 키워드에 가중치를 더 줄수 있게 해 줌

#만약 한글 영화제목이 일치하게 된다면 한글 영화 제목에서 계산되는 스코어에 가중치 값으로 3을 곱하게 됨

POST /movie_search/_search
{
  "query": {
    "multi_match": {
      "query": "fly",
      "fields": ["movieNm^3", "movieNmEn"]
    }
  }
}

##query DSL의 주요쿼리
#Match all query
#match_all 파라미터 사용 Match all query 색인에 모든 문서를 검색

POST movie_search/_search
{
  "query": {
    "match_all": {}
  }
}

#match query 
#젝스트, 숫자 , 날짜 등이 포함된 문장을 형태소 분석을 통해 텀으로 분한 후 이 텀들을 이용해 검색 질의 수행
POST movie_search/_search
{
  "query": {
    "match": {
      "movieNm": "그대 장미"
    }
  }
}

#multi match query
#match query와 사용방법은 동일하나 단일 필드가 아닌 여러 필드를 대상으로 검색해야할 때 사용
POST movie_search/_search
{
  "query": {
    "multi_match": {
      "query": "가족", 
      "fields": ["movieNm", "movieNmEn"]  
    }
  }
}


#term query 
#keyword 데이터 타입을 사용하는 필드를 검색하려면 일반적으로 숫자, keyword, 날짜 데이터를 쿼리하는데 사용
#match query의 경우 텍스트에 대해 형태소 분석을 통해 검색을 수행하지만 term query의 경우 검색어를 하나의 텀으로 처리하기 때문에 필드에 텀이 정확히 존재하지 않는 경우 검색이 되지 않음. 다라서 영문의 경우에는 대소문자가 다를 경우 검색되지 않으므로 특히 주의
POST movie_search/_search
{
  "query": {
    "term": {
      "genreAlt": "코미디"
    }
  }
}

#Bool Query 
#엘라스틱 서치에서는 하나의 쿼리나 여러개의 쿼리를 조합해서 더 높은 스코어를 가진 쿼리 조건으로 검색 수행 이러한 쿼리를 compound Query 라고 함. 이런 쿼리를 구현하기 위해 엘라스틱 서치에서는 bool query를 제공함. bool query를 상위에 두고 하위에 다른 query들을 사용해 복잡한 조건의 쿼리문을 작성할 수 있음.

{
  "query": {
    "bool": {
      "must": [],
      "must_not": [],
      "should": [],
      "filter": []
    }
  }
}

#query string
#엘라스틱 서치에는 기본적으로 내장된 쿼리분석기가 존재. query_string 파라미터를 사용하는 쿼리를 작성하면 내장된 쿼리 분석기를 이용하는 질의를 작성할 수 있음.
#기존 텀 쿼리와는 다르게 공백은 연산자로 사용되지 않으며 입력된 텍스트 그대로 형태소 분석기에 전달됨.
#위의 말은 보통 "A B" 이런식으로 들어가면 or 연산이 들어가는데 공백은 이런 연산이 적용되지 않는다는 의미

POST movie_search/_search
{
  "query": {
    "query_string": {
      "default_field": "movieNm",
      "query": "(가정) AND (어린이 날)"
    }
  }
}

#prefix query
#해당 접두어가 있는 모든 문서를 검색하는데 사용.
#역색인된 텀은 사전순으로 정렬되고 prefix query는 저장된 텀들을 스캔해서 일치하는 텀을 찾음
POST movie_search/_search
{
  "query": {
    "prefix": {
      "movieNm": "자전차"
    }
  }
}

#exists query 
#문서를 색인할 대 필드의 값이 없다면 필드를 생성하지 않거나 필드의 값을 null로 설정할 때가 있음. 이러한 데이터를 제외하고 실제 값이 존재하는 문서만 찾고 싶을 때 사용
POST movie_search/_search
{
  "query": {
    "exists": {
      "field": "movieNm"
    }
  }
}

#wildcard query
#검색어와 와일드카드와 일치하는 구문을 찾을 때 사용
#*:문자의 길이와 상관없이 와일드카드와 일치하는 모든 문서 찾음
#?:지정된 위치의 한 글자가 다른 경우의 문서를 찾음
POST movie_search/_search
{
  "query": {
    "wildcard": {
      "typeNm": "장?"
    }
  }
}

#nested query
#분산 시스템에서 sql에서 지운하는 조인과 유사한 기능을 수행하려면 엄청나게 많은 비용이 소모됨 . 수평적으로 샤드가 얼마나 늘어날 지 모르는 상황에서 모든 샤드를 검색해야할 수도 있기 때문. 하지만 업무를 수행하다 보면 문서간의 부모/자식 형태로 모델링 경우가 종종 발생. 이러한 경우에 대비해 엘라스틱서치에서는 분산 데이터 환경에서도 sql조인과 유사한 기능을 수행하는 nested query 제공

#nested 형태의 스키마를 이용해 인덱스 생성
#nested 데이터 타입은 문서 내부에 다른 문서가 존재할 때 사용. path 옵션으로 중첩된 필드를 명시하고, query 옵션에 nested 필드 검색에 사용할 쿼리 입력 

PUT movie_nested
{
  "settings": {
    "number_of_replicas": 1,
    "number_of_shards": 5
  },
  "mappings": {
    "_doc": {
      "properties": {
        "repGenreNm": {
          "type": "keyword"
        },
        "companies": {
          "type": "nested",
          "properties": {
            "companyCd": {"type": "keyword"},
            "companyNm": {"type": "keyword"}
          }
        }
      }
    }
  }
}

#
PUT movie_nested/_doc/1
{
  "movieCd": "20184623",
  "movieNm": "바람난 아내들2",
  "movieNmEn": "",
  "prdtYear": "2018",
  "openDt": "",
  "typeNm": "장편",
  "prdtStatNm": "개봉예정",
  "nationAlt":"한국",
  "genreAlt": "멜로/로맨스",
  "repNationNm": "한국",
  "repGenreNm": "멜로/로맨스",
  "companies": [
    {
      "companyCd": "20173401",
      "companyNm": "(주)케이피에이기획"
    }
  ]
}

#nested query를 이용해 child로 저장된 문서의 특정 필드를 검색할 수 있음
GET movie_nested/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "repGenreNm": "멜로/로맨스"
          }
        },
        {
          "nested": {
            "path": "companies",
            "query": {
              "bool": {
                "must": [
                  {
                    "term": {
                      "companies.companyCd": "20173401"
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  }
}

#부가적인 검색 API
#효율적인 검색을 위한 환경설정

#동적 분배방식의 샤드 선택
#엘라스틱 서치는 부하분산과 장애극복을 위해 원본 샤드의 데이터를 복제한 레플리카 샤드를 함께 운영함. 하지만 검색시 모든 사드에서 검색을 수행하게 된다면 사용자에게 중복된 결과를 전달하게 될 수도 있음. 이러한 문제를 방지하기 위해 엘라스틱서치는 검색을 수행할 대 동일 데이터를 가지고 있는 샤드 중 하나만 선택해 검색 수행

#기본적으로 검색 요청의 적절한 분배를 위해 기본적으로 라운드로빈 방식의 알고리즘을 사용. 라운드 로빈은 순차적으로 샤드를 선택하는 방식임. 
#이외에 동적분배방식은 검색 요청의 응답시간, 검색 요청을 수행하는 스레드 풀의 크기등을 고려해 최적의 샤드를 동적으로 결정하는 방식
PUT _cluster/settings
{
  "transient": {
    "cluster.routing.use_adaptive_replica_selection": true
  }
}

#글로벌 타임아웃 설정
#자칫 무거운 쿼리가 타임아웃 설정 없이 무한정으로 실행된다면 전체 시스템에 장애가 발생할 수도 있음. 개별 검색 요청의 경우 request body에 직접 타임아웃을 설정할 수 있으나 이런 방식은 많은 불편을 초래하기 때문에 모든 검색 쿼리에 동일하게 적용되도록 정책으로 설정하는것이 편리

#글로벌로 적용되는 타임아웃의 기본 정책은(-1) 무제한
PUT _cluster/settings
{
  "transient": {
    "search.default_search_timeout": "-1s"
  }
}

#search shards API
#검색이 수행되는 노드 및 샤드에 대한 정보를 확인할 수 있음. 이러한 정보는 질의를 최적화하거나 질의가 정상적으로 수행되지 않을때 문제를 해결하는데 유용 
POST movie_search/_search_shards

#multi search API
#여러건의 검색 요청을 통합해서 한번에 요청하고 한번에 결과를 종합해서 받을 때 사용되는 API
#동시에 여러개의 색인에서 검색을 수행할 수 있으므로 사용자별 맞춤 페이지등을 구현할 때 여러 인덱스에서 사용자별로 특화된 정보를 가져오거나 할 때 유용하게 활용할 수 있음.
POST _msearch
{"index": "movie_auto"}
{"query": {"match_all": {}}, "from": 0, "size": 10}
{"index": "movie_search"}
{"query": {"match_all": {}}, "from": 0, "size": 10}

#count API
#검색된 문서의 개수 확인
#URI와 Request body 검색에서 모두 사용 가능
POST movie_search/_count?q=prdtYear:2017

#
POST movie_search/_count
{
  "query": {
    "query_string": {
      "default_field": "prdtYear",
      "query": "2017"
    }
  }
}

#validate API
#쿼리 실행 전 쿼리가 유효하게 작성되었는지 검증
POST movie_search/_validate/query?q=prdtYear:2017

#
POST movie_search/_validate/query
{
  "query": {
    "match": {
      "prdtYear": 2017
    }
  }
}

#만약 쿼리가 실패했다면 구체적인 정보를 얻기위해 요청 URL 파라미터로 rewrite=true 파라미터를 추가하면 됨.
POST movie_search/_validate/query?rewrite=true
{
  "query": {
    "match": {
      "prdtYear": "2017-10-10"
    }
  }
}

#explain API
#문서 검색 결과를 확인해보면 _score를 통해 우리가 검색한 키워드와 검색 결과가 얼마나 유사한지 확인할 수 있음. 이문서가 가진 _score 값이 어떻게 계산된 것인지 자세한 정보를 확인할 때 이용
#검색이 될거라고 생각했는데 검색이 안된 단어가 있을 경우 확인

#_score를 확인할 특정 문서의 ID 가져오기
POST movie_search/_search
{
  "query": {
    "term": {
      "prdtYear": 2017
    }
  }
}

#값이 나와야 하는데 안나옴

#ex) ID결과 8
#explain API 결과 리턴
POST movie_search/_doc/8/_explain
{
  "query": {
    "term": {
      "prdtYear": 2017
    }
  }
}

#profile API
#쿼리에 대한 상세한 수행 계획과 각 수행 계획별로 수행도니 시간을 돌려주므로 성능을 튜닝하거나 디버깅할때 유용하게 활용가능. 다만 사용시 주의점은 profile API는 쿼리에 대한 내용ㅇ르 매우 상세하게 설명하므로 결과가 매우 방대하다는 것. 특히 여러 샤드에 걸쳐 검색되는 쿼리의 경우에는 더욱더 결과값이 장황하게 길어지기 때문에 확인하기가 매우 어려움.
#눈여겨봐야 할 점은 실제 쿼리가 수행된 샤드별로 프로파일 정보를 제공하고 있다는 것. 실행된 쿼리의 종류와 각 샤드마다 몇 건의 문서가 매칭됐는지 검색에 수행된 시간은 어떤지 등 상세정보가 제공됨.
POST movie_search/_search
{
  "profile": true,
  "query": {
    "match_all": {}
  }
}
